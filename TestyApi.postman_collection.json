{
	"info": {
		"_postman_id": "1497769c-3f65-4def-9be7-4a775c0a23ac",
		"name": "TestyApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29993860"
	},
	"item": [
		{
			"name": "PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('Id');",
							"  pm.expect(responseData).to.have.property('firstName');",
							"  pm.expect(responseData).to.have.property('lastName');",
							"  pm.expect(responseData).to.have.property('birthdate');",
							"  pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"Janekkkk\",\r\n  \"lastName\": \"Kowalskiiee\",\r\n  \"birthdate\": \"1990-01-02\",\r\n  \"email\": \"janek.kowalskii@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9091/v1/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9091",
					"path": [
						"v1",
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - Id, firstName, lastName, birthdate, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('Id');",
							"        pm.expect(user).to.have.property('firstName');",
							"        pm.expect(user).to.have.property('lastName');",
							"        pm.expect(user).to.have.property('birthdate');",
							"        pm.expect(user).to.have.property('email');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' field is null for all elements in the array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.id).to.be.null;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"Janekkkk\",\r\n  \"lastName\": \"Kowalskiiee\",\r\n  \"birthdate\": \"1990-01-02\",\r\n  \"email\": \"janek.kowalskii@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9091/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9091",
					"path": [
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('timestamp', 'status', 'error', 'path');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Error message should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Path is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"Janekkkk\",\r\n  \"lastName\": \"Kowalskiiee\",\r\n  \"birthdate\": \"1990-01-02\",\r\n  \"email\": \"janek.kowalskii@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9091/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9091",
					"path": [
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"Janekkkk\",\r\n  \"lastName\": \"Kowalskiiee\",\r\n  \"birthdate\": \"1990-01-02\",\r\n  \"email\": \"janek.kowalskii@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9091/v1/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9091",
					"path": [
						"v1",
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	]
}